@page "/pet"
@using BuddyFitProject.Data.Models
@using System.Security.Claims
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<BuddyFitProject.Data.BuddyFitDbContext> DbFactory
@inject NavigationManager navigationManager
@inject IHttpContextAccessor HttpContextAccessor
@inject Services.UserService UserService
@inject Services.ItemService ItemService
@inject Services.PetService PetService
@inject Services.UserInventoryService UserInventoryService
@rendermode InteractiveServer


<head>
	<PageTitle>Pet</PageTitle>
	<link href="MyPet.razor.css" rel="stylesheet" />
</head>


<div class="coin">$</div>
<div class="coin-label">@user.Coins</div>

<div class="level-coin">lvl</div>
<div class="level-label">???</div>


<body>
	<header>
		<h1>Pet</h1>
	</header>

	<br />
	<main>
		@if (pet != null)
		{
			<div class="pet-section">
				<div class="show-pet">
					<h2>@pet.Name (Level: @pet.Level)</h2>
					<br />
					<p>Health: @pet.Health_bar %</p>
					<div class="bar">
						<div class="bar-filled" style="width:@pet.Health_bar%;"></div>
					</div>
					<br />
					<p>Food: @pet.Food_bar %</p>
					<div class="bar">
						<div class="bar-filled" style="width:@pet.Food_bar%;"></div>
					</div>
				</div>
				<br />
				<div class="img-wrapper">
					@*dit is nu hardcoded, maar we moeten ff alle imgs even groot maken want anders loop je echt eindeloos te klooien
						in t css file met alle percentages voor positionering*@
					<img class="img-pet" src="@($"Pets/{pet.Type.ToLower()}.png")" alt="@pet.Type" />
					<img class="img-clothes" src="Clothing/Tutu.png" alt="tutu fitje" />
				</div>
			</div>
		}

		else
		{
			<p>No pet found!</p>
		}

		<div class="inventory-section">
			<h2>@user.Username's inventory</h2>
			@if (userInventory.Any())
			{
				<ul class="inventory-list">
					@foreach (var inventoryItem in userInventory)
					{
						if(ItemService.GetItemById(inventoryItem.ItemId).Type == "food" && inventoryItem.Quantity>0){
							<li class="inventory-item">
								<img src=@($"{ItemService.GetItemById(inventoryItem.ItemId).Name}.png") class="img-item" />
								<p>@ItemService.GetItemById(inventoryItem.ItemId).Name</p>
								<p>Quantity: @inventoryItem.Quantity</p>
								<button @onclick="() => UseItem(inventoryItem)">Use</button>
							</li>
						}
						
					}
				</ul>
			}
			else
			{
				<p>Inventory is empty</p>
			}
		</div>
	</main>
	@*
	<svg width="600" height="200" xmlns="https://localhost:7068/pets"> </svg>
	<img src="bunny.png"
	aria-hidden="true"
	width="400">
	<img src="bear.png"
	aria-hidden="false"
	width="400">
	<img src="cat.png"
	aria-hidden="true"
	width="400">*@
</body>


@code {
	private Users? user;
	private Pets? pet;
	private List<UserInventory> userInventory = new();

	private bool LoggedIn = false;
	private int Id { get; set; }

	protected override async void OnInitialized()
	{
		await base.OnInitializedAsync();

		var httpContext = HttpContextAccessor.HttpContext;

		if (httpContext?.User.Identity?.IsAuthenticated == true)
		{
			// Extract user ID from claims
			var userIdClaim = httpContext.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier);

			if (userIdClaim != null && int.TryParse(userIdClaim.Value, out int loggedInUserId))
			{

				user = UserService.GetUserById(loggedInUserId);
				//hier doen wat er gebeurt als ingelogd?
				//Services uitvogelen iets fetchen vanuit userinventory
				LoggedIn = true;
			}

			pet = PetService.GetPet(user.Id);
			userInventory = UserInventoryService.GetInventory(user.Id);
		}
		
	}

	private async Task UseItem(UserInventory item)
	{
		if ( false) //uitvogelen hoe t werkt met die foreign keys om via via bij item type te komen
		{
			
		}


		await OnInitializedAsync();
	}


}


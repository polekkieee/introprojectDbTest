@page "/pet"
@using BuddyFitProject.Data.Models
@using System.Security.Claims
@using Microsoft.AspNetCore.Mvc
@using Microsoft.EntityFrameworkCore

@inject IDbContextFactory<BuddyFitProject.Data.BuddyFitDbContext> DbFactory
@inject NavigationManager navigationManager
@inject IHttpContextAccessor HttpContextAccessor
@inject Services.UserService UserService
@inject Services.ItemService ItemService
@inject Services.PetService PetService
@inject Services.UserInventoryService UserInventoryService
@inject Services.WorkoutSessionService WorkoutSessionService
@rendermode InteractiveServer


<head>
	<PageTitle>Pet</PageTitle>
	<link href="MyPet.razor.css" rel="stylesheet" />
</head>

@if(LoggedIn){

	<div class="coin">$</div>
	<div class="coin-label">@user.Coins</div>

	<div class="level-coin">lvl</div>
	<div class="level-label">@pet.Level</div>

	<header>
		<h1>@user.Username's Fit Buddy</h1>
	</header>

	<br />
	<main>
		@* Null checker for both the Pet and User Inventory, otherwise the page won't load and/or show errors *@
		@if (pet != null)
		{
			<div class="pet-section"> @* Pet section is the left side of the page and displays the Pet*@
				<div class="pet-stats"> 
					<h2>@pet.Name (Level: @pet.Level)</h2>
					<br />
					<p>Health: @HealthBar %</p>
					<div class="bar">
						<div class="bar-filled" style="width:@HealthBar%;"></div>
					</div>
					<br />
					<p>Food: @pet.Food_bar %</p>
					<div class="bar">
						<div class="bar-filled" style="width:@pet.Food_bar%;"></div>
					</div>
					<br />
					<p>Stamina: @pet.Stamina_bar %</p>
					<div class="bar">
						<div class="bar-filled" style="width:@pet.Stamina_bar%;"></div>
					</div>
				</div>
				<br />
				<div class="img-wrapper">
					@* We are currently working on the images of the items. As we do not have all the pictures ready yet, only the 'tutu'-item works 
						on the bear right now. The other images don't have the correct positioning in the razor.css file *@
					<img class="img-pet" src="@($"Pets/{pet.Type.ToLower()}.png")" alt="@pet.Type" /> 
					@if (!string.IsNullOrEmpty(pet.Clothing)) @* Again, a null-checker to avoid the page not loading due to a null value *@
					{
						<img class="img-clothes" src="@($"Clothing/{pet.Clothing.ToLower()}.png")" alt="@pet.Clothing" />
					}
					@* <img class="img-clothes" src="Clothing/Tutu.png" alt="tutu fitje" /> *@ @* This is the hardcoded tutu image that works on the bear*@
				</div>
			</div>
		}

		else
		{
			<p>No pet found!</p>
		}

		@* UserInventory section is the right side of the page and displays the the Food-items on the uppercolumn and Outfit-items on the lower column *@
		<div class="inventory-section"> 
			<h2><strong>@user.Username's inventory</strong></h2>
			@if (userInventory.Any()) @* Null checker to avoid null-errors*@
			{
				<div class="food-items">
					<h3><strong>Food</strong></h3>
					<ul class="inventory-list">
						@foreach (var inventoryItem in userInventory)
						{
							@* Each item in UserInventory is checked to see whether it's a food. If so, it will be displayed and the User is able to use it *@
							if (ItemService.GetItemById(inventoryItem.ItemId).Type == "food" && inventoryItem.Quantity > 0)
							{
								<li class="inventory-item">
									<img src=@($"{ItemService.GetItemById(inventoryItem.ItemId).Name}.png") class="img-item" />
									<p>@ItemService.GetItemById(inventoryItem.ItemId).Name</p>
									<p>@inventoryItem.Quantity x </p>
									<button class="use-button" @onclick="() => UseItem(inventoryItem)">Use</button>
								</li>
							}
						}
					</ul>
				</div>

				<div class="clothing-items">
					<h3><strong>Clothing</strong></h3>
					<ul class="inventory-list">
						@foreach (var inventoryItem in userInventory)
						{
							@* Same logic for Food-items is applied here *@
							if (ItemService.GetItemById(inventoryItem.ItemId).Type == "outfit" && inventoryItem.Quantity > 0)
							{ 
								<li class="inventory-item">
									<img src=@($"{ItemService.GetItemById(inventoryItem.ItemId).Name}.png") class="img-item" />
									<p>@ItemService.GetItemById(inventoryItem.ItemId).Name</p>
									<p>@inventoryItem.Quantity</p>
									<button class="use-button" @onclick="() => UseItem(inventoryItem)">Use</button>
								</li>
							}
						}
					</ul>
				</div>
			}

			else
			{
				<p>Inventory is empty</p>
			}
		</div>
	</main>
}

else
{
	<h1>You must be logged in to access this page.</h1>
	<br />
	<a href="login" class="btn btn-primary">Go to Login</a>
}


@code {
	private Users? user;
	private Pets? pet;
	private List<UserInventory> userInventory = new();
	private List<WorkoutSessions> allWorkouts = new();
	private bool LoggedIn = false;
	private int HealthBar { get; set; }
	private int Id { get; set; }
	private int StaminaBar { get; set; }


	protected override async void OnInitialized()
	{
		await base.OnInitializedAsync();

		var httpContext = HttpContextAccessor.HttpContext;

		if (httpContext?.User.Identity?.IsAuthenticated == true)
		{
			// Extract user ID from claims
			var userIdClaim = httpContext.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier);

			if (userIdClaim != null && int.TryParse(userIdClaim.Value, out int loggedInUserId))
			{

				user = UserService.GetUserById(loggedInUserId);
				
				// Boolean LoggedIn is changed to true so the user has access to the page
				LoggedIn = true;

				// User items are fetched from the database using the services
				pet = PetService.GetPet(user.Id);
				allWorkouts = WorkoutSessionService.LoadWorkoutSessionsByUser(user.Id);
				userInventory = UserInventoryService.GetInventory(user.Id);
				HealthBar = PetService.ChangeHealth(user, pet, allWorkouts);
			}
		}
	}


	private void UseItem(UserInventory invItem)
	{
		// Fetch the item that the user wants to use from the database
		var item = ItemService.GetItemById(invItem.ItemId);

		// Check what kind of item it is
		if (item.Type == "food")
		{
			// The pet's food bar will go up whenever the user feeds their pet
			// and the quantity will drop in the database, both using the method in the needed services
			pet.Food_bar = Math.Min(100, pet.Food_bar + 5); 
			PetService.UpdatePet(pet);

			invItem.Quantity -= 1;
			UserInventoryService.UpdateUserInventoryItem(invItem);
		}
		else if (item.Type == "outfit")
		{
			// The clothing item is applied to the pet
			pet.Clothing = item.Name;
			PetService.UpdatePet(pet);
		}

		// The User Inventory will be fetched again in order to display the right quantity
		userInventory = UserInventoryService.GetInventory(user.Id);
		navigationManager.NavigateTo(navigationManager.Uri, true);
	}

}


@page "/login"
@using BuddyFitProject.Data
@using BuddyFitProject.Data.Models
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authentication.Cookies
@using BuddyFitProject.Components.Services;
@inject UserService UserService
@inject BuddyFitDbContext appDbContext
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [ExcludeFromInteractiveRouting]


<PageTitle>Login</PageTitle>

<style>
    body {
        margin: 0;
        font-family: Arial, sans-serif;
        background: linear-gradient(to bottom, purple, blue);
        color: #333;
        padding: 20px;
        position: relative;
    }

    .coin {
        position: absolute;
        top: 10px;
        right: 200px;
        width: 40px;
        height: 40px;
        background-color: gold;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
        color: #fff;
        font-size: 18px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
    }

    /* Coin label styling */
    .coin-label {
        position: absolute;
        top: 15px;
        right: 120px;
        font-size: 22px;
        font-weight: bold;
        text-align: left;
        color: #fff;
        text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.5);
    }

    /* Level Coin styling */
    .level-coin {
        position: absolute;
        top: 60px;
        right: 200px;
        width: 40px;
        height: 40px;
        background-color: green;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
        color: #fff;
        font-size: 18px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
    }

    /* Level label styling */
    .level-label {
        position: absolute;
        top: 65px;
        right: 120px;
        font-size: 22px;
        font-weight: bold;
        text-align: left;
        color: #fff;
        text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.5);
    }


</style>


<EditForm FormName="LoginUser" Model="@User" OnValidSubmit="LoginUser">
	<label for="Username" class="l2">Username:</label>
	<InputText required @bind-Value="User.Username" />
	<br>
	<br>
	<label for="Password" class="l2">Password:</label>
	<InputText required style="-webkit-text-security: disc; text-security: disc;" @bind-Value="User.Password" />
	<br />
	<span> @errorMessage </span>
	<button type="submit" class="b2">Login</button>

	<a href="register">
		<button class="b2">Register</button>
	</a>

	<a href="password">
		<button class="b3">Password forgotten?</button>
	</a>
</EditForm>

@code {
    [SupplyParameterFromForm]
    private Users User { get; set; } = new();

    [CascadingParameter]
    public HttpContext httpcontext { get; set; } = default!;

    private string errorMessage;



    private async Task LoginUser()
    {
        bool isUserValid = UserService.ValidateUser(User.Username, User.Password);

        if (!isUserValid)
        {
            errorMessage = "Your username or password is invalid.";
            return;
        } else {
            User = UserService.GetUserByLogin(User.Username, User.Password);
        }


        var claims = new List<Claim>
		{
			new Claim(ClaimTypes.Name, User.Username),
			new Claim(ClaimTypes.NameIdentifier, User.Id.ToString())
		};

        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity);
        await httpcontext.SignInAsync(principal);

        bool newUser = UserService.NewUser(User.Username, User.Start_condition);
        if (newUser)
        {navigationManager.NavigateTo("/userinfo"); 
        }
        else
        {
            navigationManager.NavigateTo("/session");
        }
	}
}
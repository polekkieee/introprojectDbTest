@page "/login"
@using BuddyFitProject.Data
@using BuddyFitProject.Data.Models
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authentication.Cookies
@using BuddyFitProject.Components.Services;
@inject UserService UserService
@inject BuddyFitDbContext appDbContext
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [ExcludeFromInteractiveRouting]


<PageTitle>Login</PageTitle>

<h1 class="l2">Login</h1>
<EditForm FormName="LoginUser" Model="@Model1" OnValidSubmit="LoginUser">
	<label for="Username" class="l2">Username:</label>
	<InputText @bind-Value="Model1.Username" />
	<br>
	<br>
	<label for="Password" class="l2">Password:</label>
	<InputText @bind-Value="Model1.Password" />
	<br />
	<span> @errorMessage </span>
	<button type="submit" class="b2">Login</button>

	<a href="register">
		<button class="b2">Register</button>
	</a>

	<a href="password">
		<button class="b3">Password forgotten?</button>
	</a>
</EditForm>

@code {
	[SupplyParameterFromForm]
	private Users Model1 { get; set; } = new();

	[CascadingParameter]
	public HttpContext httpcontext { get; set; } = default!;

	private string errorMessage;



    private async Task LoginUser()
    {
        // Validate user credentials
        bool isUserValid = UserService.ValidateUser(Model1.Username, Model1.Password);

        if (!isUserValid)
        {
            errorMessage = "Your username or password is invalid.";
            return;
        }

        // Fetch user details
        var user = UserService.GetUserByName(Model1.Username);
        if (user == null)
        {
            errorMessage = "User not found.";
            return;
        }

        // Update Model1 with retrieved user details
        Model1.Id = user.Id;

        // Create claims for authentication
        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.Name, Model1.Username), // Username claim
            new Claim(ClaimTypes.NameIdentifier, Model1.Id.ToString()), // User ID claim
        };

        // Create ClaimsIdentity and ClaimsPrincipal
        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity);

        // Sign in the user
        await httpcontext.SignInAsync(principal);

        // Redirect to user-specific session page
        string url = "/session/" + Model1.Id.ToString();
        //navigationManager.NavigateTo(url);
    }

}

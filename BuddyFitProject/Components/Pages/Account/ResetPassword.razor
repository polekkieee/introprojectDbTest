@page "/resetPassword/{username}/{email}"
@using BuddyFitProject.Data.Models
@using BuddyFitProject.Components.Services
@inject NavigationManager NavigationManager
@inject ValidateUserService ResetPasswordService


<head>
    <link href="ResetPassword.razor.css" rel="stylesheet" />
    <PageTitle>Reset Password</PageTitle>
</head>

<body>
    <header>
      <h1 class="l2">Reset Password</h1>
    </header>

    <main>
        <h3>Fill in the code from your email to reset your password:</h3>

        <EditForm FormName="Reset" Model="@ResetModel" OnValidSubmit="Reset">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div>
                <label for="code">Reset Code</label>
                <InputText id="code" class="form-control" @bind-Value="ResetModel.ResetCode" />
            </div>

            <div>
                <label for="password">New Password</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="ResetModel.NewPassword" />
            </div>
            <br />
            <button type="submit" class="btn btn-primary">Reset Password</button>
        </EditForm>

        @if (!string.IsNullOrEmpty(ReturnMessage))
        {
            <p class="alert alert-info">@ReturnMessage</p>
        }
    </main>
   

</body>
<h3>Fill in the code from your email to reset your password:</h3>

<h1 class="l2">Reset Password</h1>

<EditForm FormName="Reset" Model="@ResetModel" OnValidSubmit="Reset">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label for="code">Reset Code</label>
        <InputText id="code" class="form-control" @bind-Value="ResetModel.ResetCode" />
    </div>

    <div>
        <label for="password">New Password</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="ResetModel.NewPassword" />
    </div>
    <button type="submit" class="btn btn-primary">Reset Password</button>
</EditForm>

@if (!string.IsNullOrEmpty(ReturnMessage))
{
    <p class="alert alert-info">@ReturnMessage</p>
}

@code {
    [Parameter]
    public string Username { get; set; }  // Define the Username route parameter.

    [Parameter]
    public string Email { get; set; } // Define the Email route parameter.

    [SupplyParameterFromForm]
    private ResetPasswordModel ResetModel { get; set; } = new ();

    private string ReturnMessage { get; set; } = string.Empty;

    private async Task Reset()
    {
        if (string.IsNullOrEmpty(ResetModel.NewPassword))
        {
            ReturnMessage = "Password cannot be empty.";
            return;
        }

        ReturnMessage = await ResetPasswordService.ChangePasswordAsync(Username, ResetModel.ResetCode, ResetModel.NewPassword, Email);

        if (ReturnMessage == "Password reset successfully.")
        {
            NavigationManager.NavigateTo("/login");
        }
    }

    private class ResetPasswordModel
    {
        public string ResetCode { get; set; }
        public string NewPassword { get; set; }
    }
}
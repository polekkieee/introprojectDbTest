@page "/password"
@using BuddyFitProject.Components.Services
@using BuddyFitProject.Data.Models
@inject UserService UserService
@inject EmailService EmailService
@inject NavigationManager NavigationManager

<style>
	body {
		margin: 0;
		font-family: Arial, sans-serif;
		background: linear-gradient(to bottom, purple, blue);
		color: #333;
		padding: 20px;
		position: relative;
	}

    .coin {
        position: absolute;
        top: 10px;
        right: 200px;
        width: 40px;
        height: 40px;
        background-color: gold;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
        color: #fff;
        font-size: 18px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
    }

    /* Coin label styling */
    .coin-label {
        position: absolute;
        top: 15px;
        right: 120px;
        font-size: 22px;
        font-weight: bold;
        text-align: left;
        color: #fff;
        text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.5);
    }

    /* Level Coin styling */
    .level-coin {
        position: absolute;
        top: 60px;
        right: 200px;
        width: 40px;
        height: 40px;
        background-color: green;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
        color: #fff;
        font-size: 18px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
    }

    /* Level label styling */
    .level-label {
        position: absolute;
        top: 65px;
        right: 120px;
        font-size: 22px;
        font-weight: bold;
        text-align: left;
        color: #fff;
        text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.5);
    }
    /* hier moet uiteindelijk ipv 1000 en 10 coinsamount en Level moeten staan zoals in workoutscherm*/

</style>

<div class="coin">$</div>
<div class="coin-label">1000</div>

<div class="level-coin">lvl</div>
<div class="level-label">10</div>

<h3>Fill in you username and email; an email will be send so you can reset your password:</h3>


<EditForm FormName="SendEmail" Model="@User" OnValidSubmit="SendEmail">
    <label class="l2">Username:</label>
    <InputText type="text" class="l2" @bind-Value="User.Username"/>
    <hr />
    <label class="l2">Email:</label>
    <InputText type="email" class="l2" @bind-Value="User.Email" />
    <hr />
    <button class="b2" type="submit">Send</button>
</EditForm>

@if (!string.IsNullOrEmpty(ReturnMessage))
{
    <p class="alert alert-info">@ReturnMessage</p>
}


@code {
    [SupplyParameterFromForm]
    private Users User { get; set; } = new();
    private string ReturnMessage { get; set; } = string.Empty;

    private async Task SendEmail()
    {
        if (UserService.ValidateUser(User.Username, User.Password))
        {
            await EmailService.SendEmailAsync(User.Email, "resetcode", "12345678");
            NavigationManager.NavigateTo($"/resetPassword/{User.Username}/{User.Email}");
        }

       else
       {
            ReturnMessage = $"Hello, {User.Username}! You don't exist: your email is wrong or your username. Or both!";
       }
    }
}
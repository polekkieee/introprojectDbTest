@page "/userinfo"
@using Microsoft.EntityFrameworkCore
@using BuddyFitProject.Data.Models
@using BuddyFitProject.Data;
@using BuddyFitProject.Components.Services
@inject UserService UserService
@inject NavigationManager navigationManager
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authentication.Cookies
@inject UserService UserService
@inject NavigationManager navigationManager
@attribute [ExcludeFromInteractiveRouting]


<head>
	<PageTitle>User Info</PageTitle>
	<link href="UserInfo.razor.css" rel="stylesheet" />
</head>

<body>

	<h1 class="h">Set up your account</h1>
	<br />

	<EditForm FormName="infoUser" Model="@UserAndPet" OnValidSubmit="AddInfo">
		<div class="input">
			<label for="Age" class="l2">Age:</label>
			<InputNumber required @bind-Value="UserAndPet.User.Age" />
		</div>
		<br />
		<div class="input">
			<label for="Gender" class="l2">Gender:</label>
			<InputText required @bind-Value="UserAndPet.User.Gender" />
		</div>
		<br />
		<div class="input">
			<label for="StartCondition" class="l2">Start Condition:</label>
			<InputText required @bind-Value="UserAndPet.User.Start_condition" />
		</div>
		<br />
		<div class="input">
			<label>Choose your pet:</label>
			<!-- hier buutons van de pet image-->
			<br>
			<label for="PetName" class="l2">My pet's name is </label>
			<InputText required @bind-Value="UserAndPet.Pet.Name" />
		</div>




		<!--<span> @errorMessage </span>
		<div>
			<hr />
			<br />
			<button type="button"> <img src="bunny.png" aria-hidden="true" width="400"></button>
			<button> <img src="bear.png" aria-hidden="false" width="400"> </button>
			<button> <img src="cat.png" aria-hidden="true" width="400" </button>
		</div>-->
		<button type="submit" class="b2">Let's start!</button>
	</EditForm>

</body>



@code {
	[SupplyParameterFromForm]
	private UserAndPet UserAndPet { get; set; } = new();

	Users? UserDb;

	private string errorMessage;

	private void AddInfo()
	{
		if (UserDb != null)
		{
			UserDb.Gender = UserAndPet.User.Gender;
			UserDb.Age = UserAndPet.User.Age;
			UserDb.Start_condition = UserAndPet.User.Start_condition;

			UserService.UpdateUser(UserDb); // Save additional user details

			if (UserAndPet.Pet != null)
			{
				var pet = new Pets
					{
						UserId = UserDb.Id,
						Name = UserAndPet.Pet.Name,
						// type = UserAndPet.Pet.Type, Save the chosen type
						// type = UserAndPet.Pet.Type, Save the chosen type
						Level = 1,
						Food_bar = 100,
						Health_bar = 100
					};

				UserService.AddPet(pet); // Save the pet
			}

			navigationManager.NavigateTo("/session"); // Redirect to the dashboard or welcome page
		}
		else
		{
			errorMessage = "Unable to update user information.";
		}
	}

	protected override void OnInitialized()
	{
		var httpContext = HttpContextAccessor.HttpContext;

		if (httpContext?.User.Identity?.IsAuthenticated == true)
		{
			var userIdClaim = httpContext.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier);
			if (userIdClaim != null && int.TryParse(userIdClaim.Value, out int loggedInUserId))
			{
				UserDb = UserService.GetUserById(loggedInUserId);
			}
			else
			{
				navigationManager.NavigateTo("/login");
			}
		}
	}
}


<style>
	header {
    text-align: center;
    margin-bottom: 40px;
}

h1 {
    font-family: "Montserrat", sans-serif;
    font-size: 4rem;
    color: #ffffff;
    text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.5);
    margin: 0px 20px 0px 0px;
}
main {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 20px;
}
div.input {
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 10px;
    padding: 20px;
    width: 80%;
    box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.3);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}
div.input label {
    font-size: 1.8rem;
    color: #ffe1e6;
    text-shadow: 1px 1px 4px rgba(0, 0, 0, 0.4);
    margin-bottom: 10px;
}
</style>

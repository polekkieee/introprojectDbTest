@page "/userinfo"
@using Microsoft.EntityFrameworkCore
@using BuddyFitProject.Data.Models
@using BuddyFitProject.Data;
@using BuddyFitProject.Components.Services
@using static BuddyFitProject.Data.Models.UserAndPet.TypesOfPets;
@inject UserService UserService
@inject NavigationManager navigationManager
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authentication.Cookies
@inject UserService UserService
@inject NavigationManager navigationManager
@attribute [ExcludeFromInteractiveRouting]

<head>
	<PageTitle>User Info</PageTitle>
	<link href="UserInfo.razor.css" rel="stylesheet" />
</head>
<body>
	<header>
		<h1>Set up your account</h1>
	</header>

	<br />

	<main>
		<!--Form where the user needs to fill in their age, gender, start condition, name for their pet and can also choose their pet:-->
		<EditForm FormName="infoUser" Model="@UserAndPet" OnValidSubmit="AddInfo">
			<h2>About you:</h2>
			<div class="input">
				<label for="Age" class="l2">Age:</label>
				<InputNumber required @bind-Value="UserAndPet.User.Age" Min="0" @oninput="ValidateAge"/>
				@if (showAgeWarning)
				{
					<h3 class="warning">Age cannot be negative. Please enter a valid age.</h3>
				}
			</div>
			<br />
			<div class="input">
				<label for="Gender" class="l2">Gender:</label>
				<InputSelect required @bind-Value="UserAndPet.User.Gender">
					<option value="Female">Female</option>
					<option value="Male">Male</option>
					<option value="Other">Other</option>
				</InputSelect>
			</div>
			<br />
			<div class="input">
				<label for="StartCondition" class="l2">Start Condition:</label>
				<InputSelect required @bind-Value="UserAndPet.User.Start_condition">
					<option value="Terrible">Terrible</option>
					<option value="Bad">Bad</option>
					<option value="Average">Average</option>
					<option value="Good">Good</option>
					<option value="Great">Great</option>
				</InputSelect>
			</div>

			<br />
			<br />

			<h2>Choose your Fit Buddy:</h2>
			<div class="input">
				<label for="PetName" class="l2">My pet's name is </label>
				<InputText required @bind-Value="UserAndPet.Pet.Name" />
			</div>
			<br />
			<div class="radio-group">
				<InputRadioGroup @bind-Value="UserAndPet.Pet.Type">
					<label class="radio">
						<InputRadio Value="Bear" />
						<img src="Pets/bear.png" aria-hidden="true" width="200">
					</label>

					<label class="radio">
						<InputRadio Value="Cat" />
						<img src="Pets/cat.png" aria-hidden="true" width="200">
					</label>

					<label class="radio">
						<InputRadio Value="Bunny" />
						<img src="Pets/bunny.png" aria-hidden="true" width="200">
					</label>
				</InputRadioGroup>

			</div>
			<button type="submit" class="b2">Let's start!</button>
		</EditForm>
	</main>
</body>


@code {
	[SupplyParameterFromForm]
	private UserAndPet UserAndPet { get; set; } = new();
	private bool showAgeWarning = false;

	Users? UserDb;

	private string errorMessage;

	private void AddInfo() //Logic to save the info the user just gave and a few default values, into the database
	{
		if (UserDb != null)
		{
			UserDb.Gender = UserAndPet.User.Gender;
			UserDb.Age = UserAndPet.User.Age;
			UserDb.Start_condition = UserAndPet.User.Start_condition;

			UserService.UpdateUser(UserDb); //Saves the new  user details into the database

			var pet = new Pets //Set default values
				{
					UserId = UserDb.Id,
					Name = UserAndPet.Pet.Name,
					Type = UserAndPet.Pet.Type,
					Level = 1,
					Food_bar = 0,
					Health_bar = 0,
					Stamina_bar = 0,
					Clothing = "nothing",
					Health_bar_tlc = UserDb.Register_moment,
					Food_bar_tlc = UserDb.Register_moment
				};

			UserService.AddPet(pet); //Saves the pet's information into the database

			navigationManager.NavigateTo("/pet"); //Navigates to the pet page
		}
		else
		{
			errorMessage = "Unable to update user information.";
		}
	}

	private void ValidateAge(ChangeEventArgs e)
	{
		if (int.TryParse(e.Value?.ToString(), out int age))
		{
			if (age < 0)
			{
				showAgeWarning = true;
				UserAndPet.User.Age = 0; 
			}
			else
			{
				showAgeWarning = false;
			}
		}
		else
		{
			showAgeWarning = true; 
		}
		StateHasChanged();
	}

	protected override void OnInitialized() //Checks if the user is authenticated and takes consequent actions
	{
		var httpContext = HttpContextAccessor.HttpContext; //Retrieves the HTTP context

		if (httpContext?.User.Identity?.IsAuthenticated == true)
		{
			var userIdClaim = httpContext.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier);
			if (userIdClaim != null && int.TryParse(userIdClaim.Value, out int loggedInUserId)) //Parses the user's ID claim
			{
				UserDb = UserService.GetUserById(loggedInUserId); //Retrieves the id of the user, if the user is authenticated
			}
			else
			{
				navigationManager.NavigateTo("/login"); //Navigates unauthenticated users to the login page
			}
		}
	}
}




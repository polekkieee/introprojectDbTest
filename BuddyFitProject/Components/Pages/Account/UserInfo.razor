@page "/userinfo"
@using Microsoft.EntityFrameworkCore
@using BuddyFitProject.Data.Models
@using BuddyFitProject.Data;
@using BuddyFitProject.Components.Services
@inject UserService UserService
@inject NavigationManager navigationManager
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authentication.Cookies
@inject UserService UserService
@inject NavigationManager navigationManager
@attribute [ExcludeFromInteractiveRouting]

<PageTitle>User Info</PageTitle>


<h1 class="h">Set up your account</h1>
<hr />


<EditForm FormName="infoUser" Model="@UserAndPet" OnValidSubmit="AddInfo">
	<div>
	</div>
	<label for="Age" class="l2">Age:</label>
	<InputNumber required @bind-Value="UserAndPet.User.Age" />
	<br>
	<br>
	<label for="Gender" class="l2">Gender:</label>
	<InputText required @bind-Value="UserAndPet.User.Gender" />
	<br />
	<br>
	<label for="StartCondition" class="l2">Start Condition:</label>
	<InputText required @bind-Value="UserAndPet.User.Start_condition" />
	<br />
	<hr />
	<label>Choose your pet:</label>
	<br />

	<label>
		<InputCheckbox @bind-Value="UserAndPet.bear" />
		<img src="bear.png" aria-hidden="true" width="200">
	</label>
	<br />
	<label>
		<InputCheckbox @bind-Value="UserAndPet.cat" />
		<img src="cat.png" aria-hidden="true" width="200">
	</label>
	<br />
	<label>
		<InputCheckbox @bind-Value="UserAndPet.bunny" />
		<img src="bunny.png" aria-hidden="true" width="200">
	</label>

	<br>
	<label for="PetName" class="l2">My pet's name is </label>
	<InputText required @bind-Value="UserAndPet.Pet.Name" />
	<br />

	<button type="submit" class="b2">Let's start!</button>
</EditForm>

@code {
	[SupplyParameterFromForm]
	private UserAndPet UserAndPet { get; set; } = new();


	Users? UserDb;

	private string errorMessage;

	private void AddInfo()
	{
		if (UserDb != null)
		{
			UserDb.Gender = UserAndPet.User.Gender;
			UserDb.Age = UserAndPet.User.Age;
			UserDb.Start_condition = UserAndPet.User.Start_condition;

			UserService.UpdateUser(UserDb); // Save additional user details

			var pet = new Pets
				{
					UserId = UserDb.Id,
					Name = UserAndPet.Pet.Name,
					Type = this.determinePetType(),
					Level = 1,
					Food_bar = 100,
					Health_bar = 100
				};

			UserService.AddPet(pet); // Save the pet

			navigationManager.NavigateTo("/pet"); // Redirect to the pet page
		}
		else
		{
			errorMessage = "Unable to update user information.";
		}
	}

	protected override void OnInitialized()
	{
		var httpContext = HttpContextAccessor.HttpContext;

		if (httpContext?.User.Identity?.IsAuthenticated == true)
		{
			var userIdClaim = httpContext.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier);
			if (userIdClaim != null && int.TryParse(userIdClaim.Value, out int loggedInUserId))
			{
				UserDb = UserService.GetUserById(loggedInUserId);
			}
			else
			{
				navigationManager.NavigateTo("/login");
			}
		}
	}

	private string determinePetType()
	{
		if (UserAndPet.bear)
		{
			return "bear";
		}

		if (UserAndPet.cat)
		{
			return "cat";
		}

		if (UserAndPet.bunny)
		{
			return "bunny";
		}

		return "";
	}
}

<style>
	body {
		margin: 0;
		font-family: Arial, sans-serif;
		background: linear-gradient(to bottom, purple, blue);
		color: #333;
		padding: 20px;
		position: relative;
	}
</style>
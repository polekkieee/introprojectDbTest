@page "/store"
@inject BuddyFitDbContext DbContext
@using BuddyFitProject.Data
@using BuddyFitProject.Data.Models
@using Microsoft.EntityFrameworkCore
@attribute [StreamRendering]
@rendermode InteractiveServer
@using BuddyFitProject.Components.Services
@using System.Security.Claims
@inject UserService UserService
@inject UserStatisticsService UserStatisticsService
@inject UserInventoryService UserInventoryService
@inject WorkoutSessionService WorkoutService
@inject ExerciseService ExerciseService
@inject ItemService ItemService
@inject PetService PetService
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager NavigationManager

<PageTitle> Store </PageTitle>

<body>
	@if (LoggedIn)
	{
		<h1 class="h">Store</h1>

		<div class="coin">$</div>
		<div class="coin-label">@User.Coins</div>

		<div class="level-coin">lvl</div>
		<div class="level-label">@Pet.Level</div>

		<div class="storepagebox">
			<h3>What do you want to buy?</h3>

			<div class="choosestore">
				<span class="@foodbutton" @onclick='() => ToggleStore("food")'>Food</span>
				<span class="@outfitsbutton" @onclick='() => ToggleStore("outfit")'>Outfits</span>
			</div>

			@if (foodSelected)
			{

				<div class="storebox">
					<div class="product-container">
						@foreach (var item in Food)
						{
							<div class="productbox" tabindex="@Food.IndexOf(item)" @onclick="() => UpdateSelectedFood(item)">
								<div class="product">
									<img style="width: inherit; object-fit:cover;" src=@($"{item.Name}.png") />
								</div>
							</div>
						}
					</div>

					<div class="previewbox">
						@if (SelectedFood != null)
						{
							<div class="previewoutfit">
								<p>Buy @SelectedFood.Name </p>
								<img style="width: 280px; height: 280px; object-fit:cover;" src=@($"{SelectedFood.Name}.png") />
							</div>
							<div>
								@SelectedFood.Price coins per piece
							</div>

							<div>
								<InputNumber @bind-Value=SelectedFoodQuantity>Quantity</InputNumber>
								<button class="buybutton" @onclick="BuyFood">Buy</button>
							</div>
							<div>
								@responseMessage
							</div>
						}
					</div>
				</div>
			}
			else if (outfitSelected)
			{
				<div class="storebox">
					<div class="product-container">
						@foreach (var item in Outfits)
						{
							<div class="productbox" tabindex="@Outfits.IndexOf(item)" @onclick="() => UpdateSelectedOutfit(item)">
								<div class="product">
									<img style="width: inherit; object-fit:cover;" src=@($"{item.Name}.png") />

									@if (UnlockedOutfits.Contains(item))
									{
										<span style="color: gray; text-decoration: line-through;">@item.Name</span>
									}
								</div>
							</div>
						}
					</div>

					<div class="previewbox">
						@if (SelectedOutfit != null)
						{
							<div class="previewoutfit">
								<p>Selected Outfit: </p>
								<img style="width: 280px; height: 280px; object-fit:cover;" src=@($"{SelectedOutfit.Name}.png") />
							</div>
							<div>
								Price: @SelectedOutfit.Price
							</div>
							<div>
								@if (UnlockedOutfits.Any(x => x.Id == SelectedOutfit.Id))
								{
									<button disabled class="buybutton">Owned</button>
								}
								else
								{
									<button class="buybutton" @onclick="BuyOutfit">Buy</button>
								}
							</div>
							<div>
								@responseMessage
							</div>
						}
					</div>
				</div>


			}
		</div>

	}
	else
	{
		<h1>You must be logged in to access this page.</h1>
		<a href="login">Go to Login</a>
	}
</body>

@code {
	private Users? User { get; set; }
	private Pets? Pet { get; set; }

	private string responseMessage = string.Empty;

	private List<Items> storeItems = new();

	private bool LoggedIn = false;

	private List<Items> Outfits = new();
	private List<Items> Food = new();

	private List<UserInventory> userInventory = new();

	private List<Items> UnlockedOutfits = new();
	private List<Items> OwnedFood = new();

	private bool foodSelected = true;
	private bool outfitSelected = false;

	private string foodbutton = "foodbutton active";
	private string outfitsbutton = "outfitsbutton";

	private Items? SelectedOutfit;
	private Items? SelectedFood;
	private int SelectedFoodQuantity;
	private int SelectedFoodTotalPrice;


	private void ToggleStore(string section)
	{
		if (section == "food")
		{
			foodSelected = true;
			outfitSelected = false;
			foodbutton = "foodbutton active";
			outfitsbutton = "outfitsbutton";
		}
		else
		{
			outfitSelected = true;
			foodSelected = false;
			foodbutton = "foodbutton";
			outfitsbutton = "outfitsbutton active";
		}
	}


	private void UpdateSelectedFood(Items item)
	{
		SelectedFood = item;
		SelectedFoodQuantity = 0;
		responseMessage = string.Empty;
	}

	private void UpdateSelectedOutfit(Items item)
	{
		SelectedOutfit = item;
		responseMessage = string.Empty;
	}

	private async Task BuyFood()
	{
		responseMessage = string.Empty;
		if (SelectedFoodQuantity > 0)
		{
			SelectedFoodTotalPrice = SelectedFood.Price * SelectedFoodQuantity;
			if (User.Coins >= SelectedFoodTotalPrice)
			{
				UserInventory existingInventoryItem = UserInventoryService.GetInventoryItem(User.Id, SelectedFood.Id);
				existingInventoryItem.Quantity += SelectedFoodQuantity;
				UserInventoryService.UpdateUserInventoryItem(existingInventoryItem);

				User.Coins -= SelectedFoodTotalPrice;
				UserService.UpdateUser(User);

				LoadUserInventory();
				SelectedFoodQuantity = 0;
				responseMessage = "Succesfully bought";
			}
			else
			{
				responseMessage = "Not enough coins!";
			}
		}
		else
		{
			responseMessage = "Enter a valid value";
		}


	}


	private async Task BuyOutfit()
	{
		responseMessage = string.Empty;
		if (User.Coins >= SelectedOutfit.Price)
		{
			UserInventory existingInventoryItem = UserInventoryService.GetInventoryItem(User.Id, SelectedOutfit.Id);
			existingInventoryItem.Quantity = 1;
			UserInventoryService.UpdateUserInventoryItem(existingInventoryItem);

			User.Coins -= SelectedOutfit.Price;
			UserService.UpdateUser(User);
			LoadUserInventory();
			responseMessage = "Succesfully bought";

		}
		else
		{
			responseMessage = "Not enough coins!";
		}

	}

	private void LoadUserInventory()
	{
		UserInventoryService.UpdateUserInventory(User.Id);

		userInventory = UserInventoryService.GetInventory(User.Id);

		foreach (var userInventoryItem in userInventory)
		{
			if (ItemService.GetItemById(userInventoryItem.ItemId).Type == "outfit")
			{
				UnlockedOutfits.Add(ItemService.GetItemById(userInventoryItem.ItemId));
			}
			else if (ItemService.GetItemById(userInventoryItem.ItemId).Type == "food")
			{
				OwnedFood.Add(ItemService.GetItemById(userInventoryItem.ItemId));
			}
		}

	}

	private void DistributeStoreItemsByType()
	{
		foreach (var item in storeItems)
		{
			if (item.Type == "outfit")
			{
				Outfits.Add(ItemService.GetItemById(item.Id));
			}
			else if (item.Type == "food")
			{
				Food.Add(ItemService.GetItemById(item.Id));
			}
		}
	}

	// Calls to load all store data when the page initializes
	protected override async Task OnInitializedAsync()
	{
		var httpContext = HttpContextAccessor.HttpContext;

		if (httpContext?.User.Identity?.IsAuthenticated == true)
		{
			var userIdClaim = httpContext.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier);
			if (userIdClaim != null && int.TryParse(userIdClaim.Value, out int loggedInUserId))
			{
				User = UserService.GetUserById(loggedInUserId);
				Pet = PetService.GetPet(User.Id);
				LoggedIn = true;
				storeItems = ItemService.LoadItems();

				LoadUserInventory();

				DistributeStoreItemsByType();

				SelectedOutfit = Outfits.FirstOrDefault();
				SelectedFood = Food.FirstOrDefault();
				SelectedFoodQuantity = 0;
			}
		}
	}
}



<style>
	.storebox {
		display: flex;
		flex-direction: row;
		justify-content: space-around;
	}

	.storepagebox {
		width: 100%;
		display: flex;
		flex-direction: column;
		justify-content: center;
		align-items: center;
		padding: 20px;
	}

	.previewbox {
		margin-top: 3vh;
		width: 320px;
		display: flex;
		flex-direction: column;
		justify-content: center;
		align-items: center;
		background-color: #258cfb;
	}

	.previewoutfit {
		width: 90%;
		display: flex;
		flex-direction: column;
		justify-content: center;
	}

	.product-container {
		margin-top: 3vh;
		display: grid;
		grid-template-columns: repeat(3, 1fr);
		width: fit-content;
		max-height: 60vh;
		grid-row-gap: 20px;
		overflow-y: auto;
	}

	.productbox {
		text-decoration: none;
		position: relative;
		text-align: center;
		margin: 0px 10px 10px 10px;
		background-color: #f2f2f2;
	}

		.productbox:hover {
			background-color: #e9e9e9;
			cursor: pointer;
		}

		.productbox:focus {
			background-color: #258cfb;
		}



	.product {
		width: 28vh;
		height: 28vh;
		display: flex;
		flex-direction: column;
		align-items: center;
		justify-content: flex-start;
		color: #1E1E24;
	}

	body {
		color: #fff;
		background-color: revert;
	}

	h1 {
		font-size: 4rem;
		margin-top: 5px;
		color: #fff;
		text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.5);
	}

	h2 {
		font-size: 1.5rem;
		position: absolute;
		left: 247px;
		top: 50px;
		color: #fff;
		text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.5);
	}

	h3 {
		color: #fff;
	}

	p {
		font-size: 1.4rem;
		margin-bottom: 20px;
		color: #fdfdfd;
		text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.5);
	}

	.wrapper {
		display: flex;
		justify-content: flex-start;
		align-items: flex-start;
		width: 100%;
	}

	.top-right-coins {
		position: fixed;
		top: 10px;
		right: 20px;
		display: flex;
		align-items: center;
		gap: 5px;
		font-size: 16px;
	}

	/* Styling for store category buttons (Food/Outfits) */
	.choosestore {
		display: flex;
		flex-direction: row;
		justify-content: space-between;
		align-items: center;
		background-color: azure;
		padding: 10px 0;
		border-radius: 10px;
		gap: 20px;
	}

	.foodbutton,
	.outfitsbutton {
		font-size: 1.4rem;
		padding: 10px 20px;
		cursor: pointer;
		background-color: #fff;
		color: #333;
		border-radius: 5px;
		transition: background-color 0.3s, transform 0.2s;
		text-align: center;
	}

		/* Style for active buttons */
		.foodbutton.active,
		.outfitsbutton.active {
			background-color: #1b6ec2;
			border-color: #1861ac;
			color: white;
			font-weight: bold;
			transform: scale(1.1);
		}

		.foodbutton:hover,
		.outfitsbutton:hover {
			box-shadow: 0 0 0 0.1rem white, 0 0 0 0.25rem #258cfb;
			transform: scale(1.05);
		}

	.coin {
		position: absolute;
		top: 10px;
		right: 200px;
		width: 40px;
		height: 40px;
		background-color: gold;
		border-radius: 50%;
		display: flex;
		align-items: center;
		justify-content: center;
		font-weight: bold;
		color: #fff;
		font-size: 18px;
		box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
	}

	/* Coin label styling */
	.coin-label {
		position: absolute;
		top: 15px;
		right: 120px;
		font-size: 22px;
		font-weight: bold;
		text-align: left;
		color: #fff;
		text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.5);
	}

	/* Level Coin styling */
	.level-coin {
		position: absolute;
		top: 60px;
		right: 200px;
		width: 40px;
		height: 40px;
		background-color: green;
		border-radius: 50%;
		display: flex;
		align-items: center;
		justify-content: center;
		font-weight: bold;
		color: #fff;
		font-size: 18px;
		box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
	}

	/* Level label styling */
	.level-label {
		position: absolute;
		top: 65px;
		right: 120px;
		font-size: 22px;
		font-weight: bold;
		text-align: left;
		color: #fff;
		text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.5);
	}
</style>
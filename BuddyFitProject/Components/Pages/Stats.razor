@page "/stats"
@using BuddyFitProject.Data.Models
@using System.Security.Claims
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<BuddyFitProject.Data.BuddyFitDbContext> DbFactory
@using BuddyFitProject.Components.Services
@inject NavigationManager navigationManager
@inject IHttpContextAccessor HttpContextAccessor
@inject UserService UserService
@inject UserStatisticsService UserStatisticsService
@inject PetService PetService
@inject Services.ExerciseService ExerciseService
@rendermode InteractiveServer
@inject IHttpContextAccessor HttpContextAccessor


<head>
    <link href="Stats.razor.css" rel="stylesheet" />
    <PageTitle>Statistics</PageTitle>
</head>

    <h1>Workout History</h1>

    @if(LoggedIn)
    {

        <div class="coin">$</div>
        <div class="coin-label">@User.Coins</div>

        <div class="level-coin">lvl</div>
        <div class="level-label">@Pet.Level</div>

        <br />
        <button class="btn btn-primary" @onclick="LoadStatsRefresh">Load Stats</button>
        <br />
        <br />

        <main>
            <h4>@User.Username 's Statistics</h4>

            <table class="table">
                <thead>
                    <tr>
                        <td>    <p>Exercise</p>             </td>
                        <td>    <p>Total Minutes</p>        </td>
                        <td>    <p>Total Coins earned</p>   </td>

                    </tr>
                </thead>

                <tbody>
                    @foreach (var s in UserStatistics)
                    {
                        <tr>
                            <td>@ExerciseService.GetExerciseById(s.ExerciseId).Name</td>

                            <td>@s.Total_minutes.ToString()</td>

                            <td>@s.Total_coins.ToString()</td>
                        </tr>
                    }
                </tbody>
            </table>
        </main>


    }
    else
    { 
        <h1>You must be logged in to access this page.</h1>
        <br />
        <a href="login" class=" btn btn-primary">Go to Login</a>

    }


@code {
    private List<UserStatistics> UserStatistics = new();
    private Users? User;
    private Pets? Pet;

    private bool LoggedIn = false;

    private void LoadStats()
    {
        try
        {
            // Update and fetch User statistics
            UserStatisticsService.UpdateUserStatistics(User.Id);
            UserStatistics = UserStatisticsService.GetStatisticsByUser(User.Id);
        }
        catch (Exception ex)
        {
            // Log error or show a User-friendly message
            Console.WriteLine($"Error updating stats: {ex.Message}");
        }
    }

    private void LoadStatsRefresh()
    {
        try
        {
            // Update and fetch User statistics
            UserStatisticsService.UpdateUserStatistics(User.Id);
            UserStatistics = UserStatisticsService.GetStatisticsByUser(User.Id);
            navigationManager.NavigateTo(navigationManager.Uri, true);
        }
        catch (Exception ex)
        {
            // Log error or show a User-friendly message
            Console.WriteLine($"Error updating stats: {ex.Message}");
        }
    }


    protected override async void OnInitialized()
    {
        await base.OnInitializedAsync();

        var httpContext = HttpContextAccessor.HttpContext;

        if (httpContext?.User.Identity?.IsAuthenticated == true)
        {
            // Extract User ID from claims
            var UserIdClaim = httpContext.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier);

            if (UserIdClaim != null && int.TryParse(UserIdClaim.Value, out int loggedInUserId))
            {

                User = UserService.GetUserById(loggedInUserId);
                Pet = PetService.GetPet(User.Id);
                LoadStats();

                LoggedIn = true;
            }
        }
    }
}

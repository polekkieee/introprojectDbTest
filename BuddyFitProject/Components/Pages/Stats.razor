@page "/stats"
@using BuddyFitProject.Data.Models
@using System.Security.Claims
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<BuddyFitProject.Data.BuddyFitDbContext> DbFactory
@using BuddyFitProject.Components.Services
@inject NavigationManager navigationManager
@inject IHttpContextAccessor HttpContextAccessor
@inject UserService UserService
@inject UserStatisticsService UserStatisticsService
@inject PetService PetService
@inject Services.ExerciseService ExerciseService
@rendermode InteractiveServer
@inject IHttpContextAccessor HttpContextAccessor


<head>
    <link href="Stats.razor.css" rel="stylesheet" />
    <PageTitle>Statistics</PageTitle>
</head>

<body>
    <h1>Workout History</h1>

    @if(LoggedIn)
    {

        <div class="coin">$</div>
        <div class="coin-label">@User.Coins</div>

        <div class="level-coin">lvl</div>
        <div class="level-label">@Pet.Level</div>

        <br />
        <button class="btn btn-primary" @onclick="LoadStatsRefresh">Load Stats</button>
        <br />

        <div class="button-group">
            <button class="btn btn-secondary" @onclick="() =>ViewPeriod('w')">Weekly</button>
            <button class="btn btn-secondary" @onclick="() =>ViewPeriod('m')">Monthly</button>
            <button class="btn btn-secondary" @onclick="() =>ViewPeriod('y')">Yearly</button>
        </div>

        <br />

        <main>
            <h4><strong>@User.Username 's Statistics</strong></h4>

            <table class="table">
                <thead>
                    <tr>
                        <td>    <h5>Exercise</h5>             </td>
                        <td>    <h5>Total Minutes</h5>        </td>
                        <td>    <h5>Total Coins earned</h5>   </td>

                    </tr>
                </thead>

                <tbody>
                    @foreach (var s in UserStatistics)
                    {
                        <tr>
                            <td>    <p>@ExerciseService.GetExerciseById(s.ExerciseId).Name</p>  </td>

                            <td>    <p>@s.Total_minutes.ToString()</p>                          </td>

                            <td>    <p>@s.Total_coins.ToString()</p>                            </td>
                        </tr>
                    }
                </tbody>
            </table>

            <div class="bar-wrapper">
                @foreach (var s in UserStatistics)
                {
                    var exerciseName = @ExerciseService.GetExerciseById(s.ExerciseId).Name;
                    var exerciseWidth = BarWidth(@s.Total_minutes);

                    <div class="bar-container">
                        <span class="bar-text">@exerciseName</span>
                        <div class="bars">
                            <div class="bar" style="width:@exerciseWidth%"></div>
                        </div>
                        <span class="bar-minutes">@s.Total_minutes.ToString()</span>
                    </div>
                }
            </div>

        </main>


    }
    else
    { 
        <h1>You must be logged in to access this page.</h1>
        <br />
        <a href="login" class=" btn btn-primary">Go to Login</a>

    }

</body>
@code {
    private List<UserStatistics> UserStatistics = new();
    private Users? User;
    private Pets? Pet;

    private bool LoggedIn = false;
    private int MinutesAmount { get; set; } = 1;

    private void LoadStats()
    {
        try
        {
            // Update and fetch User statistics
            UserStatisticsService.UpdateUserStatistics(User.Id);
            UserStatistics = UserStatisticsService.GetStatisticsByUser(User.Id);
        }
        catch (Exception ex)
        {
            // Log error or show a User-friendly message
            Console.WriteLine($"Error updating stats: {ex.Message}");
        }
    }

    private async Task ViewPeriod (char time)
    {//w is week m is maand en y is jaar; kan geen strings doen door "" gebruik??
        try
        {
            UserStatisticsService.UpdateUserStatistics(User.Id);
                // Fetch statistics for the selected timeframe
                UserStatistics = UserStatisticsService.GetStatisticsByUserAndTime(User.Id, time);

                // Update the max minutes for the bar chart
                if (UserStatistics.Any())
                {
                    MinutesAmount = UserStatistics.Max(s => s.Total_minutes);

                await InvokeAsync(StateHasChanged);
                }
            }
            catch (Exception ex)
            {
               
            }
        
    }
    private int BarWidth (int minutes)
    {
        try
        {
           
            return minutes / MinutesAmount * 100;
        }
        catch{
            return 100;
        }
    }


    private void LoadStatsRefresh()
    {
        try
        {
            // Update and fetch User statistics
            UserStatisticsService.UpdateUserStatistics(User.Id);
            UserStatistics = UserStatisticsService.GetStatisticsByUser(User.Id);
            navigationManager.NavigateTo(navigationManager.Uri, true);
        }
        catch (Exception ex)
        {
            // Log error or show a User-friendly message
            Console.WriteLine($"Error updating stats: {ex.Message}");
        }
    }


    protected override async void OnInitialized()
    {
        await base.OnInitializedAsync();

        var httpContext = HttpContextAccessor.HttpContext;

        if (httpContext?.User.Identity?.IsAuthenticated == true)
        {
            // Extract User ID from claims
            var UserIdClaim = httpContext.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier);

            if (UserIdClaim != null && int.TryParse(UserIdClaim.Value, out int loggedInUserId))
            {

                User = UserService.GetUserById(loggedInUserId);
                Pet = PetService.GetPet(User.Id);
                LoadStats();
                await ViewPeriod('w');

                LoggedIn = true;
            }
        }
    }
}

    
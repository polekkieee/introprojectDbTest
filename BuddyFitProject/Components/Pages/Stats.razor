@page "/stats"
@using BuddyFitProject.Data.Models
@using System.Security.Claims
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<BuddyFitProject.Data.BuddyFitDbContext> DbFactory
@using BuddyFitProject.Components.Services
@inject NavigationManager navigationManager
@inject IHttpContextAccessor HttpContextAccessor
@inject UserService UserService
@inject UserStatisticsService UserStatisticsService
@inject PetService PetService
@inject Services.ExerciseService ExerciseService
@rendermode InteractiveServer
@inject IHttpContextAccessor HttpContextAccessor


<head>
    <link href="Stats.razor.css" rel="stylesheet" />
    <PageTitle>Statistics</PageTitle>
</head>

    <h1>Workout History</h1>

    @if(LoggedIn)
    {

        <div class="coin">$</div>
        <div class="coin-label">@User.Coins</div>

        <div class="level-coin">lvl</div>
        <div class="level-label">@Pet.Level</div>

        <br />
        <button class="btn btn-primary" @onclick="LoadStatsRefresh">Load Stats</button>
        <br />
        <br />

        <main>
            <h4>@User.Username 's Statistics</h4>

            <table class="table">
                <thead>
                    <tr>
                        <td>    <h5>Exercise</h5>             </td>
                        <td>    <h5>Total Minutes</h5>        </td>
                        <td>    <h5>Total Coins earned</h5>   </td>

                    </tr>
                </thead>

                <tbody>
                    @foreach (var s in UserStatistics)
                    {
                        <tr>
                            <td>    <p>@ExerciseService.GetExerciseById(s.ExerciseId).Name</p>  </td>

                            <td>    <p>@s.Total_minutes.ToString()</p>                          </td>

                            <td>    <p>@s.Total_coins.ToString()</p>                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </main>


    }
    else
    { 
        <h1>You must be logged in to access this page.</h1>
        <br />
        <a href="login" class=" btn btn-primary">Go to Login</a>

    }


@code {
    private List<UserStatistics> UserStatistics = new();
    private Users? User;
    private Pets? Pet;

    private bool LoggedIn = false;

    private void LoadStats()
    {
        try
        {
            // Update and fetch User statistics
            UserStatisticsService.UpdateUserStatistics(User.Id);
            UserStatistics = UserStatisticsService.GetStatisticsByUser(User.Id);
        }
        catch (Exception ex)
        {
            // Log error or show a User-friendly message
            Console.WriteLine($"Error updating stats: {ex.Message}");
        }
    }

    private void LoadStatsRefresh()
    {
        try
        {
            // Update and fetch User statistics
            UserStatisticsService.UpdateUserStatistics(User.Id);
            UserStatistics = UserStatisticsService.GetStatisticsByUser(User.Id);
            navigationManager.NavigateTo(navigationManager.Uri, true);
        }
        catch (Exception ex)
        {
            // Log error or show a User-friendly message
            Console.WriteLine($"Error updating stats: {ex.Message}");
        }
    }


    protected override async void OnInitialized()
    {
        await base.OnInitializedAsync();

        var httpContext = HttpContextAccessor.HttpContext;

        if (httpContext?.User.Identity?.IsAuthenticated == true)
        {
            // Extract User ID from claims
            var UserIdClaim = httpContext.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier);

            if (UserIdClaim != null && int.TryParse(UserIdClaim.Value, out int loggedInUserId))
            {

                User = UserService.GetUserById(loggedInUserId);
                Pet = PetService.GetPet(User.Id);
                LoadStats();

                LoggedIn = true;
            }
        }
    }
}

        <style>

    body {
        color: #fff;
    }

    table{
        color: white;
    }
    

    h1 {
        text-align: center;
        margin-bottom: 40px;
        font-family: "Montserrat", sans-serif;
        font-size: 4rem;
        color: #ffffff;
        text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.5);
        margin: 0px 20px 0px 0px;
    }

    h5{
        color: white;
    }

    p{
        color: white;
    }

    main {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 20px;
    }

        main h4 {
            font-size: 1.5rem;
            color: #ffe1e6;
            text-shadow: 1px 1px 4px rgba(0, 0, 0, 0.4);
            margin-bottom: 10px;
        }

    div.input {
        background: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
        border-radius: 10px;
        padding: 20px;
        width: 80%;
        box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.3);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

        div.input label {
            font-size: 1.8rem;
            color: #ffe1e6;
            text-shadow: 1px 1px 4px rgba(0, 0, 0, 0.4);
            margin-bottom: 10px;
        }

    div.message {
        text-align: center;
        margin-top: 20px;
    }

        div.message p {
            font-style: italic;
            font-size: 1.3rem;
            color: #ffffff;
            text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.5);
        }

    div.button-group {
        display: flex;
        flex-direction: row;
        align-items: center;
        gap: 10px;
        margin-top: 15px;
    }

    btn {
        border: none;
        color: white;
        padding: 15px 32px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
    }

    .coin {
        position: absolute;
        top: 10px;
        right: 200px;
        width: 40px;
        height: 40px;
        background-color: gold;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
        color: #fff;
        font-size: 18px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
    }

    /* Coin label styling */
    .coin-label {
        position: absolute;
        top: 15px;
        right: 120px;
        font-size: 22px;
        font-weight: bold;
        text-align: left;
        color: #fff;
        text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.5);
    }

    /* Level Coin styling */
    .level-coin {
        position: absolute;
        top: 60px;
        right: 200px;
        width: 40px;
        height: 40px;
        background-color: green;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
        color: #fff;
        font-size: 18px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
    }

    /* Level label styling */
    .level-label {
        position: absolute;
        top: 65px;
        right: 120px;
        font-size: 22px;
        font-weight: bold;
        text-align: left;
        color: #fff;
        text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.5);
    }
    /* hier moet uiteindelijk ipv 1000 en 10 coinsamount en Level moeten staan zoals in workoutscherm*/

        </style>
@page "/session"
@attribute [StreamRendering]
@rendermode InteractiveServer
@using BuddyFitProject.Data
@using BuddyFitProject.Data.Models
@using BuddyFitProject.Components.Services
@using System.Security.Claims
@inject UserService UserService
@inject UserStatisticsService UserStatisticsService
@inject WorkoutSessionService WorkoutService
@inject ExerciseService ExerciseService
@inject PetService PetService
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager NavigationManager

<PageTitle>Workout Session</PageTitle>


@if (LoggedIn)
{
    <h1>Workout</h1>
    <p>Log your exercises by filling the minutes or by adding +1 minute by clicking the arrow in the textbox</p>

    <div class="coin">$</div>
    <div class="coin-label">@User.Coins</div>

    <div class="level-coin">lvl</div>
    <div class="level-label">@Pet.Level</div>

    <div class="wrapper">
        <!-- Left white frame with Coins amount label -->
        <div class="left-frame">
            <label>Current coins amount:</label>
            <label>@coinsamount</label>

            <button @onclick="CalculateRewards">Convert given data to coins</button>
            <button @onclick="LogWorkout">Log your workout</button>


            <label>So @User.Username, what exercises did you do today?</label>
        </div>



        <!-- Exercise container -->
        <div class="exercise-container">

            @foreach (var workout in WorkoutList)
            {

                if (WeightExercises.Contains(ExerciseService.GetExerciseById(workout.ExerciseId).Name))
                {
                    <div class="onderdeel-item2">
                        <label>Minutes</label>
                        <label>Weights(kg)</label>
                    </div>

                    <div class="exercise-item">
                        <label>@ExerciseService.GetExerciseById(workout.ExerciseId).Name</label>
                        <input type="number" @bind="workout.Minutes" />
                        <input type="number" class="weight-input" />
                    </div>
                }
                else if (DistanceExercises.Contains(ExerciseService.GetExerciseById(workout.ExerciseId).Name))
                {
                    <div class="onderdeel-item2">
                        <label>Minutes</label>
                        <label>Distance(m)</label>
                    </div>

                    <div class="exercise-item">
                        <label>@ExerciseService.GetExerciseById(workout.ExerciseId).Name</label>
                        <input type="number" @bind="workout.Minutes" />
                        <input type="number" class="speed-input" />
                    </div>
                }
                else
                {
                    <div class="onderdeel-item">
                        <label>Minutes</label>
                    </div>

                    <div class="exercise-item">
                        <label>@ExerciseService.GetExerciseById(workout.ExerciseId).Name</label>
                        <input type="number" @bind="workout.Minutes" />
                    </div>
                }
            }
        </div>
    </div>





    @if (!string.IsNullOrEmpty(RewardMessage))
    {
        <p class="text-success">@RewardMessage</p>
    }
}
else
{
    <h1>You must be logged in to access this page.</h1>
    <a href="login">Go to Login</a>
}

@code {
    private Users? User;
    private Pets? Pet;
    private List<Exercises> Exercises = new();
    private bool LoggedIn = false;
    private string RewardMessage = string.Empty;
    private List<WorkoutSessions> WorkoutList = new();
    private List<string> WeightExercises = ["Bench Press", "Dumbbell Rows", "Curls", "Leg Press"];
    private List<string> DistanceExercises = ["Walking", "Cycling", "Swimming", "Running", "Sprinting", "Stair Walking"];

    private int coinsamount = 0;

    protected override async Task OnInitializedAsync()
    {
        var httpContext = HttpContextAccessor.HttpContext;

        if (httpContext?.User.Identity?.IsAuthenticated == true)
        {
            var UserIdClaim = httpContext.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier);
            if (UserIdClaim != null && int.TryParse(UserIdClaim.Value, out int loggedInUserId))
            {
                User = UserService.GetUserById(loggedInUserId);
                Pet = PetService.GetPet(User.Id);
                LoggedIn = true;
                Exercises = ExerciseService.LoadExercises();

                foreach (var exercise in Exercises)
                {
                    WorkoutList.Add(new WorkoutSessions
                        {
                            UserId = User.Id,
                            ExerciseId = exercise.Id
                        }
                     );
                }
            }
        }
    }

    private void CalculateRewards()
    {
        coinsamount = 0;
        foreach (var workout in WorkoutList)
        {
            if (workout.Minutes > 0)
            {
                coinsamount += workout.Minutes * ExerciseService.GetExerciseById(workout.ExerciseId).Coins_pm;
            }
        }
        if (coinsamount == 0)
        {
            return;
        }
    }

    private async Task LogWorkout()
    {
        int TotalMinutes = 0;
        if (coinsamount == 0)
        {
            return;
        }
        foreach (var workout in WorkoutList)
        {
            if (workout.Minutes > 0)
            {
                TotalMinutes += workout.Minutes;
                workout.Reward = workout.Minutes * ExerciseService.GetExerciseById(workout.ExerciseId).Coins_pm;
                await WorkoutService.AddWorkoutSessionAsync(workout);
                User.Coins += workout.Reward;
            }
        }
        WorkoutList.Clear();
        foreach (var exercise in Exercises)
        {
            WorkoutList.Add(new WorkoutSessions
                {
                    UserId = User.Id,
                    ExerciseId = exercise.Id
                }
             );
        }
        PetService.ChangeStamina(Pet, TotalMinutes);
        PetService.IncreaseHealth(TotalMinutes, Pet);
        UserService.UpdateUser(User);
        UserStatisticsService.UpdateUserStatistics(User.Id);
        CalculateRewards();
        NavigationManager.NavigateTo(NavigationManager.Uri, true);
    }
}

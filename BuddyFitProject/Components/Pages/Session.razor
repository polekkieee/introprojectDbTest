@page "/session"
@attribute [StreamRendering]
@rendermode InteractiveServer
@using BuddyFitProject.Data
@using BuddyFitProject.Data.Models
@using BuddyFitProject.Components.Services
@using System.Security.Claims
@inject UserService UserService
@inject UserStatisticsService UserStatisticsService
@inject WorkoutSessionService WorkoutService
@inject ExerciseService ExerciseService
@inject PetService PetService
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager NavigationManager

<head>
    <link href="Session.razor.css" rel="stylesheet" />
    <PageTitle> Workout Session </PageTitle>
</head>

<body>
@if (LoggedIn) {

        <h1>Workout</h1>
        <p>Log your exercises by filling the minutes or by adding +1 minute by clicking the arrow in the textbox</p>

        <div class="coin">$</div>
        <div class="coin-label">@User.Coins</div>

        <div class="level-coin">lvl</div>
        <div class="level-label">@Pet.Level</div>

        <div class="wrapper">
            <!-- Left white frame with Coins amount label -->
            <div class="left-frame">
                <label>Current coins amount:</label>
                <label>@coinsamount</label>

                <button @onclick="CalculateRewards">Convert given data to coins</button>
                <button  @onclick="LogWorkout">Log your workout</button>


                <label>So @User.Username, what exercises did you do today?</label>
            </div>



            <!-- Exercise container -->
            <div class="exercise-container">

                @foreach(var workout in WorkoutList){

                    if (WeightExercises.Contains(ExerciseService.GetExerciseById(workout.ExerciseId).Name))
                    {
                        <div class="onderdeel-item2">
                            <label>Minutes</label>
                            <label>Weights(kg)</label>
                        </div>

                        <div class="exercise-item">
                            <label>@ExerciseService.GetExerciseById(workout.ExerciseId).Name</label>
                            <input type="number" @bind="workout.Minutes" />
                            <input type="number" class="weight-input" />
                        </div>
                    }
                    else if (DistanceExercises.Contains(ExerciseService.GetExerciseById(workout.ExerciseId).Name))
                    {
                        <div class="onderdeel-item2">
                            <label>Minutes</label>
                            <label>Distance(m)</label>
                        </div>

                        <div class="exercise-item">
                            <label>@ExerciseService.GetExerciseById(workout.ExerciseId).Name</label>
                            <input type="number" @bind="workout.Minutes" />
                            <input type="number" class="speed-input" />
                        </div>
                    } else {
                        <div class="onderdeel-item">
                            <label>Minutes</label>
                        </div>

                        <div class="exercise-item">
                            <label>@ExerciseService.GetExerciseById(workout.ExerciseId).Name</label>
                            <input type="number" @bind="workout.Minutes" />
                        </div>
                    }
                }
            </div>
        </div>





        @if (!string.IsNullOrEmpty(RewardMessage))
        {
            <p class="text-success">@RewardMessage</p>
        }
    }
    else
    {
        <h1>You must be logged in to access this page.</h1>
        <a href="login">Go to Login</a>
    }

</body>
@code {
    private Users? User;
    private Pets? Pet;
    private List<Exercises> Exercises = new();
    private bool LoggedIn = false;
    private string RewardMessage = string.Empty;
    private List<WorkoutSessions> WorkoutList = new();
    private List<string> WeightExercises = ["Bench Press", "Dumbbell Rows", "Curls", "Leg Press"];
    private List<string> DistanceExercises = ["Walking", "Cycling", "Swimming", "Running", "Sprinting", "Stair Walking"];



    private int coinsamount = 0;

    protected override async Task OnInitializedAsync()
    {
        var httpContext = HttpContextAccessor.HttpContext;

        if (httpContext?.User.Identity?.IsAuthenticated == true)
        {
            var userIdClaim = httpContext.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier);
            if (userIdClaim != null && int.TryParse(userIdClaim.Value, out int loggedInUserId))
            {
                User= UserService.GetUserById(loggedInUserId);
                Pet = PetService.GetPet(User.Id);
                LoggedIn = true;
                Exercises = ExerciseService.LoadExercises();

                foreach(var exercise in Exercises){
                    WorkoutList.Add(new WorkoutSessions
                        {
                            UserId = User.Id,
                            ExerciseId = exercise.Id
                        }
                     );
                }
            }
        }
    }

    private void CalculateRewards(){
        coinsamount = 0;
        foreach(var workout in WorkoutList){
            if (workout.Minutes > 0)
            {
                coinsamount += workout.Minutes * ExerciseService.GetExerciseById(workout.ExerciseId).Coins_pm;
            }
        }
        if(coinsamount == 0){
            return;
        }
    }

    private async Task LogWorkout()
    {
        if(coinsamount == 0){
            return;
        }
        foreach (var workout in WorkoutList){
            if(workout.Minutes > 0){
                workout.Reward = workout.Minutes * ExerciseService.GetExerciseById(workout.ExerciseId).Coins_pm;
                await WorkoutService.AddWorkoutSessionAsync(workout);
            }
        }
        WorkoutList.Clear();
        foreach (var exercise in Exercises)
        {
            WorkoutList.Add(new WorkoutSessions
                {
                    UserId = User.Id,
                    ExerciseId = exercise.Id
                }
             );
        }
        UserStatisticsService.UpdateUserStatistics(User.Id); 
        CalculateRewards();
        NavigationManager.NavigateTo(NavigationManager.Uri, true);

        // private int PushUpMinutes = 0;
        // private int PlankMinutes = 0;
        // private int BurpeesMinutes = 0;
        // private int JumpingJacksMinutes = 0;
        // private int BenchPressMinutes = 0;
        // private int BenchPressWeight = 0;
        // private int DumbbellRowsMinutes = 0;
        // private int DumbbellRowsWeight = 0;
        // private int CurlsMinutes = 0;
        // private int CurlsWeight = 0;
        // private int PullUpMinutes = 0;
        // private int LegPressMinutes = 0;
        // private int LegPressWeight = 0;
        // private int WalkingMinutes = 0;
        // private int WalkingSpeed = 0;
        // private int CyclingMinutes = 0;
        // private int CyclingSpeed = 0;
        // private int SwimmingMinutes = 0;
        // private int SwimmingSpeed = 0;
        // private int RunningMinutes = 0;
        // private int RunningSpeed = 0;
        // private int SprintingMinutes = 0;
        // private int SprintingSpeed = 0;
        // private int WallsitsMinutes = 0;
        // private int RopeJumpingMinutes = 0;
        // private int StairWalkingMinutes = 0;
        // private int StairWalkingSpeed = 0;
    }
}

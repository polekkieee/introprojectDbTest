@page "/session"
@using BuddyFitProject.Data
@using BuddyFitProject.Data.Models
@using BuddyFitProject.Components.Services
@using System.Security.Claims
@inject UserService UserService
@inject WorkoutSessionService WorkoutService
@inject ExerciseService ExerciseService
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor

<PageTitle>Session</PageTitle>

<style>
    body {
        margin: 0;
        font-family: Arial, sans-serif;
        background: linear-gradient(to bottom, purple, blue);
        color: #333;
        padding: 20px;
        position: relative;
    }

    .coin {
        position: absolute;
        top: 10px;
        right: 200px;
        width: 40px;
        height: 40px;
        background-color: gold;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
        color: #fff;
        font-size: 18px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
    }

    /* Coin label styling */
    .coin-label {
        position: absolute;
        top: 15px;
        right: 120px;
        font-size: 22px;
        font-weight: bold;
        text-align: left;
        color: #fff;
        text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.5);
    }

    /* Level Coin styling */
    .level-coin {
        position: absolute;
        top: 60px;
        right: 200px;
        width: 40px;
        height: 40px;
        background-color: green;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
        color: #fff;
        font-size: 18px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
    }

    /* Level label styling */
    .level-label {
        position: absolute;
        top: 65px;
        right: 120px;
        font-size: 22px;
        font-weight: bold;
        text-align: left;
        color: #fff;
        text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.5);
    }
    /* hier moet uiteindelijk ipv 1000 en 10 coinsamount en Level moeten staan zoals in workoutscherm*/

</style>

<div class="coin">$</div>
<div class="coin-label">1000</div>

<div class="level-coin">lvl</div>
<div class="level-label">10</div>


@if (LoggedIn)
{
    <p>Welcome, @user.Username</p>
    <h1>Log Your Workout Session</h1>
    <EditForm method="post" FormName="WorkoutLogForm" Model="WorkoutSession" OnValidSubmit="LogWorkout">
        <div>
            <label for="exercise">Select Exercise:</label>
            <InputSelect id="exercise" @bind-Value="WorkoutSession.ExerciseId">
                <option value="">-- Choose an exercise --</option>
                @foreach (var exercise in Exercises)
                {
                    <option value="@exercise.Id">@exercise.Name</option>
                }
            </InputSelect>
        </div>
        <div>
            <label for="minutes">Duration (minutes):</label>
            <InputNumber id="minutes" @bind-Value="WorkoutSession.Minutes" />
        </div>
        <button type="submit" class="btn btn-primary">Log Workout</button>
    </EditForm>

    @if (!string.IsNullOrEmpty(RewardMessage))
    {
        <p class="text-success">@RewardMessage</p>
    }
}
else
{
    <h1>You must be logged in to access this page.</h1>
    <a href="login">Go to Login</a>
}

@code {
    [SupplyParameterFromForm] private WorkoutSessions WorkoutSession { get; set; } = new();

    private Users? user;
    private List<Exercises> Exercises = new();
    private bool LoggedIn  = false;
    private string RewardMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var httpContext = HttpContextAccessor.HttpContext;

        // Check if user is authenticated
        if (httpContext?.User.Identity?.IsAuthenticated == true)
        {
            var userIdClaim = httpContext.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier);
            if (userIdClaim != null && int.TryParse(userIdClaim.Value, out int loggedInUserId))
            {
                // Load user and exercises if UserId is provided
                user = UserService.GetUserById(loggedInUserId);
                LoggedIn = true;
                Exercises = ExerciseService.LoadExercises();
            }
        }
    }

    private async Task LogWorkout()
    {
        if (WorkoutSession.ExerciseId == 0 || WorkoutSession.Minutes <= 0)
        {
            RewardMessage = "Please select a valid exercise and duration.";
            return;
        }

        var exercise = Exercises.FirstOrDefault(e => e.Id == WorkoutSession.ExerciseId);
        if (exercise == null)
        {
            RewardMessage = "Invalid exercise selected.";
            return;
        }

        // Calculate reward
        WorkoutSession.Reward = exercise.Coins_pm * WorkoutSession.Minutes;
        WorkoutSession.UserId = user.Id;
        WorkoutSession.Timestamp = DateTime.Now;

        // Save workout session
        await WorkoutService.AddWorkoutSessionAsync(WorkoutSession);

        // Update user coins
        if (user != null)
        {
            user.Coins += WorkoutSession.Reward;
            UserService.UpdateUser(user);
        }

        RewardMessage = $"Workout logged! You earned {WorkoutSession.Reward} coins.";
        // Reset form and show success message
        WorkoutSession = new WorkoutSessions();
    }
}

@page "/Session"
@using Microsoft.EntityFrameworkCore
@using BuddyFitProject.Data.Models
@inject IDbContextFactory<BuddyFitProject.Data.BuddyFitDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Session</PageTitle>

<h1>Workout</h1>
<p>Finished working out? Log your session!</p>

<hr/>
<p> I have done the following workout for [] minutes</p>
<div class="row">
	<div class="col-md-8">
		<EditForm method ="post" Model="WorkoutSession" OnValidSubmit="LogWorkout" FormName="create" Enhance>

			<div class="mb-3">
				<label for="pushups"> pushups:</label>
			<InputNumber id="pushup" @bind-Value="WorkoutSession.Minutes" class="form-control"></InputNumber>
			</div>
			<div class="mb-3">
				<label for="situps">Situps:</label>
				<InputNumber id="situp" @bind-Value="WorkoutSession.Minutes" class="form-control"></InputNumber>
			</div>
			<div class="mb-3">
				<label for="plank">Planks:</label>
				<InputNumber id="plank" @bind-Value="WorkoutSession.Minutes" class="form-control"></InputNumber>
			</div>
			
			<button type="submit" class="btn btn-primary">I finihsed working out!</button>
		</EditForm>
	</div>
</div>



@code{
	[SupplyParameterFromForm]
	private WorkoutSessions WorkoutSession { get; set; } = new();

	private int pushupmins { get; set; } = 0;
	private int pushupcoins { get; set; } = 0;

	private async Task LogWorkout()
	{
		//WorkoutSession.Timestamp = DateTime.Now;
		using var context = DbFactory.CreateDbContext();
		//context.WorkoutSessions.Add(WorkoutSession);


		using var dbContext = await DbFactory.CreateDbContextAsync();


		//pushup
		if (pushupmins > 0 && pushupmins != null)
		{
			context.WorkoutSessions.Add(new WorkoutSessions
				{
					ExerciseId = 1,
					UserId = 1, // nog ff kijken hoe dit aan die user gelogd wordt
					Minutes = pushupmins,
					Reward = pushupcoins,
					Timestamp = DateTime.Now,
				});
		}
		await context.SaveChangesAsync();
	}


	private int calculateCoins()
	{
		return 0;
	}
	
	
}



